diff --git a/bind/libavoid/vpsc.cpp b/bind/libavoid/vpsc.cpp
index 9530490..a12b4d9 100644
--- a/bind/libavoid/vpsc.cpp
+++ b/bind/libavoid/vpsc.cpp
@@ -39,7 +39,6 @@ void bind_libavoid_vpsc(std::function< pybind11::module &(std::string const &nam
 		pybind11::class_<Avoid::Block, std::shared_ptr<Avoid::Block>> cl(M("Avoid"), "Block", "");
 		cl.def( pybind11::init( [](class Avoid::Blocks * a0){ return new Avoid::Block(a0); } ), "doc" , pybind11::arg("blocks"));
 		cl.def( pybind11::init<class Avoid::Blocks *, class Avoid::Variable *const>(), pybind11::arg("blocks"), pybind11::arg("v") );
-
 		cl.def_readwrite("posn", &Avoid::Block::posn);
 		cl.def_readwrite("ps", &Avoid::Block::ps);
 		cl.def_readwrite("deleted", &Avoid::Block::deleted);
@@ -55,8 +54,8 @@ void bind_libavoid_vpsc(std::function< pybind11::module &(std::string const &nam
 		cl.def("merge", (class Avoid::Block * (Avoid::Block::*)(class Avoid::Block *, class Avoid::Constraint *)) &Avoid::Block::merge, "C++: Avoid::Block::merge(class Avoid::Block *, class Avoid::Constraint *) --> class Avoid::Block *", pybind11::return_value_policy::automatic, pybind11::arg("b"), pybind11::arg("c"));
 		cl.def("mergeIn", (void (Avoid::Block::*)(class Avoid::Block *)) &Avoid::Block::mergeIn, "C++: Avoid::Block::mergeIn(class Avoid::Block *) --> void", pybind11::arg("b"));
 		cl.def("mergeOut", (void (Avoid::Block::*)(class Avoid::Block *)) &Avoid::Block::mergeOut, "C++: Avoid::Block::mergeOut(class Avoid::Block *) --> void", pybind11::arg("b"));
-		cl.def("split", (void (Avoid::Block::*)(class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *)) &Avoid::Block::split, "C++: Avoid::Block::split(class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *) --> void", pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
-		cl.def("splitBetween", (class Avoid::Constraint * (Avoid::Block::*)(class Avoid::Variable *, class Avoid::Variable *, class Avoid::Block *&, class Avoid::Block *&)) &Avoid::Block::splitBetween, "C++: Avoid::Block::splitBetween(class Avoid::Variable *, class Avoid::Variable *, class Avoid::Block *&, class Avoid::Block *&) --> class Avoid::Constraint *", pybind11::return_value_policy::automatic, pybind11::arg("vl"), pybind11::arg("vr"), pybind11::arg("lb"), pybind11::arg("rb"));
+		// cl.def("split", (void (Avoid::Block::*)(class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *)) &Avoid::Block::split, "C++: Avoid::Block::split(class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *) --> void", pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
+		// cl.def("splitBetween", (class Avoid::Constraint * (Avoid::Block::*)(class Avoid::Variable *, class Avoid::Variable *, class Avoid::Block *&, class Avoid::Block *&)) &Avoid::Block::splitBetween, "C++: Avoid::Block::splitBetween(class Avoid::Variable *, class Avoid::Variable *, class Avoid::Block *&, class Avoid::Block *&) --> class Avoid::Constraint *", pybind11::return_value_policy::automatic, pybind11::arg("vl"), pybind11::arg("vr"), pybind11::arg("lb"), pybind11::arg("rb"));
 		cl.def("setUpInConstraints", (void (Avoid::Block::*)()) &Avoid::Block::setUpInConstraints, "C++: Avoid::Block::setUpInConstraints() --> void");
 		cl.def("setUpOutConstraints", (void (Avoid::Block::*)()) &Avoid::Block::setUpOutConstraints, "C++: Avoid::Block::setUpOutConstraints() --> void");
 		cl.def("cost", (double (Avoid::Block::*)()) &Avoid::Block::cost, "C++: Avoid::Block::cost() --> double");
@@ -108,7 +107,7 @@ void bind_libavoid_vpsc(std::function< pybind11::module &(std::string const &nam
 		cl.def_readwrite("blockTimeCtr", &Avoid::Blocks::blockTimeCtr);
 		cl.def("mergeLeft", (void (Avoid::Blocks::*)(class Avoid::Block *)) &Avoid::Blocks::mergeLeft, "C++: Avoid::Blocks::mergeLeft(class Avoid::Block *) --> void", pybind11::arg("r"));
 		cl.def("mergeRight", (void (Avoid::Blocks::*)(class Avoid::Block *)) &Avoid::Blocks::mergeRight, "C++: Avoid::Blocks::mergeRight(class Avoid::Block *) --> void", pybind11::arg("l"));
-		cl.def("split", (void (Avoid::Blocks::*)(class Avoid::Block *, class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *)) &Avoid::Blocks::split, "C++: Avoid::Blocks::split(class Avoid::Block *, class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *) --> void", pybind11::arg("b"), pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
+		// cl.def("split", (void (Avoid::Blocks::*)(class Avoid::Block *, class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *)) &Avoid::Blocks::split, "C++: Avoid::Blocks::split(class Avoid::Block *, class Avoid::Block *&, class Avoid::Block *&, class Avoid::Constraint *) --> void", pybind11::arg("b"), pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
 		cl.def("cleanup", (void (Avoid::Blocks::*)()) &Avoid::Blocks::cleanup, "C++: Avoid::Blocks::cleanup() --> void");
 		cl.def("cost", (double (Avoid::Blocks::*)()) &Avoid::Blocks::cost, "C++: Avoid::Blocks::cost() --> double");
 		cl.def("size", (unsigned long (Avoid::Blocks::*)() const) &Avoid::Blocks::size, "C++: Avoid::Blocks::size() const --> unsigned long");
diff --git a/bind/libcola/sparse_matrix.cpp b/bind/libcola/sparse_matrix.cpp
index 48f7168..5441776 100644
--- a/bind/libcola/sparse_matrix.cpp
+++ b/bind/libcola/sparse_matrix.cpp
@@ -234,16 +234,16 @@ void bind_libcola_sparse_matrix(std::function< pybind11::module &(std::string co
 		cl.def("print", (void (cola::SparseMatrix::*)() const) &cola::SparseMatrix::print, "C++: cola::SparseMatrix::print() const --> void");
 		cl.def("rowSize", (unsigned int (cola::SparseMatrix::*)() const) &cola::SparseMatrix::rowSize, "C++: cola::SparseMatrix::rowSize() const --> unsigned int");
 	}
-	{ // cola::SubConstraint file:libcola/compound_constraints.h line:51
-		pybind11::class_<cola::SubConstraint, std::shared_ptr<cola::SubConstraint>> cl(M("cola"), "SubConstraint", "");
-		cl.def( pybind11::init( [](enum vpsc::Dim const & a0, class vpsc::Constraint const & a1){ return new cola::SubConstraint(a0, a1); } ), "doc" , pybind11::arg("dim"), pybind11::arg("constraint"));
-		cl.def( pybind11::init<enum vpsc::Dim, class vpsc::Constraint, double>(), pybind11::arg("dim"), pybind11::arg("constraint"), pybind11::arg("cost") );
+	// { // cola::SubConstraint file:libcola/compound_constraints.h line:51
+	// 	pybind11::class_<cola::SubConstraint, std::shared_ptr<cola::SubConstraint>> cl(M("cola"), "SubConstraint", "");
+	// 	cl.def( pybind11::init( [](enum vpsc::Dim const & a0, class vpsc::Constraint const & a1){ return new cola::SubConstraint(a0, a1); } ), "doc" , pybind11::arg("dim"), pybind11::arg("constraint"));
+	// 	cl.def( pybind11::init<enum vpsc::Dim, class vpsc::Constraint, double>(), pybind11::arg("dim"), pybind11::arg("constraint"), pybind11::arg("cost") );
 
-		cl.def( pybind11::init( [](cola::SubConstraint const &o){ return new cola::SubConstraint(o); } ) );
-		cl.def_readwrite("dim", &cola::SubConstraint::dim);
-		cl.def_readwrite("constraint", &cola::SubConstraint::constraint);
-		cl.def_readwrite("cost", &cola::SubConstraint::cost);
-	}
+	// 	cl.def( pybind11::init( [](cola::SubConstraint const &o){ return new cola::SubConstraint(o); } ) );
+	// 	cl.def_readwrite("dim", &cola::SubConstraint::dim);
+	// 	cl.def_readwrite("constraint", &cola::SubConstraint::constraint);
+	// 	cl.def_readwrite("cost", &cola::SubConstraint::cost);
+	// }
 	{ // cola::VariableIDMap file:libcola/compound_constraints.h line:93
 		pybind11::class_<cola::VariableIDMap, std::shared_ptr<cola::VariableIDMap>> cl(M("cola"), "VariableIDMap", "Holds a mapping between two sets of Variable indices.\n\n This can be used to rewrite the Rectangles to which a set of \n CompoundConstraints apply to.  This is useful when creating another\n instance of the problem, but using the same CompoundConstraints list.\n You should not usually need to use this yourself.  It is utilised by \n addons such as topology::AvoidTopologyAddon.\n\n If a mapping for a particular value is not set, it is considered to be\n equal on both sides of the mapping.");
 		cl.def( pybind11::init( [](){ return new cola::VariableIDMap(); } ) );
diff --git a/bind/libdialect/graphs.cpp b/bind/libdialect/graphs.cpp
index 3ad10eb..cc17d6f 100644
--- a/bind/libdialect/graphs.cpp
+++ b/bind/libdialect/graphs.cpp
@@ -73,7 +73,7 @@ struct PyCallBack_dialect_GhostNode : public dialect::GhostNode {
 void bind_libdialect_graphs(std::function< pybind11::module &(std::string const &namespace_) > &M)
 {
 	// dialect::swap(class dialect::Graph &, class dialect::Graph &) file:libdialect/graphs.h line:192
-	M("dialect").def("swap", (void (*)(class dialect::Graph &, class dialect::Graph &)) &dialect::swap, "Swap operator.\n\nC++: dialect::swap(class dialect::Graph &, class dialect::Graph &) --> void", pybind11::arg("first"), pybind11::arg("second"));
+	// M("dialect").def("swap", (void (*)(class dialect::Graph &, class dialect::Graph &)) &dialect::swap, "Swap operator.\n\nC++: dialect::swap(class dialect::Graph &, class dialect::Graph &) --> void", pybind11::arg("first"), pybind11::arg("second"));
 
 	{ // dialect::Node file:libdialect/graphs.h line:713
 		pybind11::class_<dialect::Node, std::shared_ptr<dialect::Node>, PyCallBack_dialect_Node> cl(M("dialect"), "Node", "The Node class represents nodes in a graph.");
diff --git a/bind/libproject/util.cpp b/bind/libproject/util.cpp
index a31a242..03972ad 100644
--- a/bind/libproject/util.cpp
+++ b/bind/libproject/util.cpp
@@ -97,7 +97,7 @@ void bind_libproject_util(std::function< pybind11::module &(std::string const &n
 		cl.def("clearConstraints", (void (project::Variable::*)()) &project::Variable::clearConstraints, "C++: project::Variable::clearConstraints() --> void");
 	}
 	// project::compute_dfdv(const class project::Variable *, const class project::Constraint *) file:libproject/project.h line:132
-	M("project").def("compute_dfdv", (double (*)(const class project::Variable *, const class project::Constraint *)) &project::compute_dfdv, "C++: project::compute_dfdv(const class project::Variable *, const class project::Constraint *) --> double", pybind11::arg(""), pybind11::arg(""));
+	// M("project").def("compute_dfdv", (double (*)(const class project::Variable *, const class project::Constraint *)) &project::compute_dfdv, "C++: project::compute_dfdv(const class project::Variable *, const class project::Constraint *) --> double", pybind11::arg(""), pybind11::arg(""));
 
 	{ // project::Constraint file:libproject/project.h line:138
 		pybind11::class_<project::Constraint, std::shared_ptr<project::Constraint>> cl(M("project"), "Constraint", "A separation constraint of the form \n\n ");
@@ -113,7 +113,7 @@ void bind_libproject_util(std::function< pybind11::module &(std::string const &n
 		cl.def("wantsToMoveApart", (bool (project::Constraint::*)() const) &project::Constraint::wantsToMoveApart, "C++: project::Constraint::wantsToMoveApart() const --> bool");
 	}
 	// project::cmpLagrangians(class project::Constraint *, class project::Constraint *) file:libproject/project.h line:175
-	M("project").def("cmpLagrangians", (bool (*)(class project::Constraint *, class project::Constraint *)) &project::cmpLagrangians, "C++: project::cmpLagrangians(class project::Constraint *, class project::Constraint *) --> bool", pybind11::arg("a"), pybind11::arg("b"));
+	// M("project").def("cmpLagrangians", (bool (*)(class project::Constraint *, class project::Constraint *)) &project::cmpLagrangians, "C++: project::cmpLagrangians(class project::Constraint *, class project::Constraint *) --> bool", pybind11::arg("a"), pybind11::arg("b"));
 
 	{ // project::Block file:libproject/project.h line:182
 		pybind11::class_<project::Block, std::shared_ptr<project::Block>> cl(M("project"), "Block", "A block is a set of variables spanned by a tree of active constraints.");
diff --git a/bind/libvpsc/block.cpp b/bind/libvpsc/block.cpp
index f8871d9..1d9bc46 100644
--- a/bind/libvpsc/block.cpp
+++ b/bind/libvpsc/block.cpp
@@ -53,8 +53,8 @@ void bind_libvpsc_block(std::function< pybind11::module &(std::string const &nam
 		cl.def("merge", (class vpsc::Block * (vpsc::Block::*)(class vpsc::Block *, class vpsc::Constraint *)) &vpsc::Block::merge, "C++: vpsc::Block::merge(class vpsc::Block *, class vpsc::Constraint *) --> class vpsc::Block *", pybind11::return_value_policy::automatic, pybind11::arg("b"), pybind11::arg("c"));
 		cl.def("mergeIn", (void (vpsc::Block::*)(class vpsc::Block *)) &vpsc::Block::mergeIn, "C++: vpsc::Block::mergeIn(class vpsc::Block *) --> void", pybind11::arg("b"));
 		cl.def("mergeOut", (void (vpsc::Block::*)(class vpsc::Block *)) &vpsc::Block::mergeOut, "C++: vpsc::Block::mergeOut(class vpsc::Block *) --> void", pybind11::arg("b"));
-		cl.def("split", (void (vpsc::Block::*)(class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *)) &vpsc::Block::split, "C++: vpsc::Block::split(class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *) --> void", pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
-		cl.def("splitBetween", (class vpsc::Constraint * (vpsc::Block::*)(class vpsc::Variable *, class vpsc::Variable *, class vpsc::Block *&, class vpsc::Block *&)) &vpsc::Block::splitBetween, "C++: vpsc::Block::splitBetween(class vpsc::Variable *, class vpsc::Variable *, class vpsc::Block *&, class vpsc::Block *&) --> class vpsc::Constraint *", pybind11::return_value_policy::automatic, pybind11::arg("vl"), pybind11::arg("vr"), pybind11::arg("lb"), pybind11::arg("rb"));
+		// cl.def("split", (void (vpsc::Block::*)(class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *)) &vpsc::Block::split, "C++: vpsc::Block::split(class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *) --> void", pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
+		// cl.def("splitBetween", (class vpsc::Constraint * (vpsc::Block::*)(class vpsc::Variable *, class vpsc::Variable *, class vpsc::Block *&, class vpsc::Block *&)) &vpsc::Block::splitBetween, "C++: vpsc::Block::splitBetween(class vpsc::Variable *, class vpsc::Variable *, class vpsc::Block *&, class vpsc::Block *&) --> class vpsc::Constraint *", pybind11::return_value_policy::automatic, pybind11::arg("vl"), pybind11::arg("vr"), pybind11::arg("lb"), pybind11::arg("rb"));
 		cl.def("setUpInConstraints", (void (vpsc::Block::*)()) &vpsc::Block::setUpInConstraints, "C++: vpsc::Block::setUpInConstraints() --> void");
 		cl.def("setUpOutConstraints", (void (vpsc::Block::*)()) &vpsc::Block::setUpOutConstraints, "C++: vpsc::Block::setUpOutConstraints() --> void");
 		cl.def("cost", (double (vpsc::Block::*)()) &vpsc::Block::cost, "C++: vpsc::Block::cost() --> double");
diff --git a/bind/libvpsc/blocks.cpp b/bind/libvpsc/blocks.cpp
index 16add45..6877f81 100644
--- a/bind/libvpsc/blocks.cpp
+++ b/bind/libvpsc/blocks.cpp
@@ -26,7 +26,7 @@ void bind_libvpsc_blocks(std::function< pybind11::module &(std::string const &na
 		cl.def_readwrite("blockTimeCtr", &vpsc::Blocks::blockTimeCtr);
 		cl.def("mergeLeft", (void (vpsc::Blocks::*)(class vpsc::Block *)) &vpsc::Blocks::mergeLeft, "C++: vpsc::Blocks::mergeLeft(class vpsc::Block *) --> void", pybind11::arg("r"));
 		cl.def("mergeRight", (void (vpsc::Blocks::*)(class vpsc::Block *)) &vpsc::Blocks::mergeRight, "C++: vpsc::Blocks::mergeRight(class vpsc::Block *) --> void", pybind11::arg("l"));
-		cl.def("split", (void (vpsc::Blocks::*)(class vpsc::Block *, class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *)) &vpsc::Blocks::split, "C++: vpsc::Blocks::split(class vpsc::Block *, class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *) --> void", pybind11::arg("b"), pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
+		// cl.def("split", (void (vpsc::Blocks::*)(class vpsc::Block *, class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *)) &vpsc::Blocks::split, "C++: vpsc::Blocks::split(class vpsc::Block *, class vpsc::Block *&, class vpsc::Block *&, class vpsc::Constraint *) --> void", pybind11::arg("b"), pybind11::arg("l"), pybind11::arg("r"), pybind11::arg("c"));
 		cl.def("cleanup", (void (vpsc::Blocks::*)()) &vpsc::Blocks::cleanup, "C++: vpsc::Blocks::cleanup() --> void");
 		cl.def("cost", (double (vpsc::Blocks::*)()) &vpsc::Blocks::cost, "C++: vpsc::Blocks::cost() --> double");
 		cl.def("size", (unsigned long (vpsc::Blocks::*)() const) &vpsc::Blocks::size, "C++: vpsc::Blocks::size() const --> unsigned long");
