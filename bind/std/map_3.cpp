#include <functional>
#include <iterator>
#include <libavoid/geomtypes.h>
#include <map>
#include <memory>
#include <sstream> // __str__
#include <utility>

#include <functional>
#include <pybind11/pybind11.h>
#include <string>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_std_map_3(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // std::map file:map line:898
		pybind11::class_<std::map<unsigned long,unsigned int>, std::shared_ptr<std::map<unsigned long,unsigned int>>> cl(M("std"), "map_unsigned_long_unsigned_int_t", "");
		cl.def( pybind11::init( [](){ return new std::map<unsigned long,unsigned int>(); } ) );
		cl.def( pybind11::init<const struct std::less<unsigned long> &>(), pybind11::arg("__comp") );

		cl.def( pybind11::init<const struct std::less<unsigned long> &, const class std::allocator<struct std::pair<const unsigned long, unsigned int> > &>(), pybind11::arg("__comp"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::map<unsigned long,unsigned int> const &o){ return new std::map<unsigned long,unsigned int>(o); } ) );
		cl.def( pybind11::init<const class std::allocator<struct std::pair<const unsigned long, unsigned int> > &>(), pybind11::arg("__a") );

		cl.def( pybind11::init<const class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &, const class std::allocator<struct std::pair<const unsigned long, unsigned int> > &>(), pybind11::arg("__m"), pybind11::arg("__a") );

		cl.def("assign", (class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > & (std::map<unsigned long,unsigned int>::*)(const class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::operator=, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::operator=(const class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &) --> class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &", pybind11::return_value_policy::automatic, pybind11::arg("__m"));
		cl.def("empty", (bool (std::map<unsigned long,unsigned int>::*)() const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::empty, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::empty() const --> bool");
		cl.def("size", (unsigned long (std::map<unsigned long,unsigned int>::*)() const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::size, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::map<unsigned long,unsigned int>::*)() const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::max_size, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::max_size() const --> unsigned long");
		cl.def("__getitem__", (unsigned int & (std::map<unsigned long,unsigned int>::*)(const unsigned long &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::operator[], "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::operator[](const unsigned long &) --> unsigned int &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("at", (unsigned int & (std::map<unsigned long,unsigned int>::*)(const unsigned long &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::at, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::at(const unsigned long &) --> unsigned int &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("get_allocator", (class std::allocator<struct std::pair<const unsigned long, unsigned int> > (std::map<unsigned long,unsigned int>::*)() const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::get_allocator, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::get_allocator() const --> class std::allocator<struct std::pair<const unsigned long, unsigned int> >");
		cl.def("key_comp", (struct std::less<unsigned long> (std::map<unsigned long,unsigned int>::*)() const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::key_comp, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::key_comp() const --> struct std::less<unsigned long>");
		cl.def("insert", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> >, bool> (std::map<unsigned long,unsigned int>::*)(const struct std::pair<const unsigned long, unsigned int> &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::insert, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::insert(const struct std::pair<const unsigned long, unsigned int> &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> >, bool>", pybind11::arg("__v"));
		cl.def("erase", (unsigned long (std::map<unsigned long,unsigned int>::*)(const unsigned long &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::erase, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::erase(const unsigned long &) --> unsigned long", pybind11::arg("__k"));
		cl.def("clear", (void (std::map<unsigned long,unsigned int>::*)()) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::clear, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::clear() --> void");
		cl.def("swap", (void (std::map<unsigned long,unsigned int>::*)(class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::swap, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::swap(class std::map<unsigned long, unsigned int, struct std::less<unsigned long>, class std::allocator<struct std::pair<const unsigned long, unsigned int> > > &) --> void", pybind11::arg("__m"));
		cl.def("count", (unsigned long (std::map<unsigned long,unsigned int>::*)(const unsigned long &) const) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::count, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::count(const unsigned long &) const --> unsigned long", pybind11::arg("__k"));
		cl.def("equal_range", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> > > (std::map<unsigned long,unsigned int>::*)(const unsigned long &)) &std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::equal_range, "C++: std::map<unsigned long, unsigned int, std::less<unsigned long>, std::allocator<std::pair<const unsigned long, unsigned int> > >::equal_range(const unsigned long &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned long, unsigned int>, class std::__tree_node<struct std::__value_type<unsigned long, unsigned int>, void *> *, long> > >", pybind11::arg("__k"));
	}
	{ // std::map file:map line:898
		pybind11::class_<std::map<int,int>, std::shared_ptr<std::map<int,int>>> cl(M("std"), "map_int_int_t", "");
		cl.def( pybind11::init( [](){ return new std::map<int,int>(); } ) );
		cl.def( pybind11::init<const struct std::less<int> &>(), pybind11::arg("__comp") );

		cl.def( pybind11::init<const struct std::less<int> &, const class std::allocator<struct std::pair<const int, int> > &>(), pybind11::arg("__comp"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::map<int,int> const &o){ return new std::map<int,int>(o); } ) );
		cl.def( pybind11::init<const class std::allocator<struct std::pair<const int, int> > &>(), pybind11::arg("__a") );

		cl.def( pybind11::init<const class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &, const class std::allocator<struct std::pair<const int, int> > &>(), pybind11::arg("__m"), pybind11::arg("__a") );

		cl.def("assign", (class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > & (std::map<int,int>::*)(const class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::operator=, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::operator=(const class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &) --> class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &", pybind11::return_value_policy::automatic, pybind11::arg("__m"));
		cl.def("empty", (bool (std::map<int,int>::*)() const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::empty, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::empty() const --> bool");
		cl.def("size", (unsigned long (std::map<int,int>::*)() const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::size, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::map<int,int>::*)() const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::max_size, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::max_size() const --> unsigned long");
		cl.def("__getitem__", (int & (std::map<int,int>::*)(const int &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::operator[], "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::operator[](const int &) --> int &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("at", (int & (std::map<int,int>::*)(const int &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::at, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::at(const int &) --> int &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("get_allocator", (class std::allocator<struct std::pair<const int, int> > (std::map<int,int>::*)() const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::get_allocator, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::get_allocator() const --> class std::allocator<struct std::pair<const int, int> >");
		cl.def("key_comp", (struct std::less<int> (std::map<int,int>::*)() const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::key_comp, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::key_comp() const --> struct std::less<int>");
		cl.def("insert", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> >, bool> (std::map<int,int>::*)(const struct std::pair<const int, int> &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::insert, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::insert(const struct std::pair<const int, int> &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> >, bool>", pybind11::arg("__v"));
		cl.def("erase", (unsigned long (std::map<int,int>::*)(const int &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::erase, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::erase(const int &) --> unsigned long", pybind11::arg("__k"));
		cl.def("clear", (void (std::map<int,int>::*)()) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::clear, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::clear() --> void");
		cl.def("swap", (void (std::map<int,int>::*)(class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::swap, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::swap(class std::map<int, int, struct std::less<int>, class std::allocator<struct std::pair<const int, int> > > &) --> void", pybind11::arg("__m"));
		cl.def("count", (unsigned long (std::map<int,int>::*)(const int &) const) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::count, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::count(const int &) const --> unsigned long", pybind11::arg("__k"));
		cl.def("equal_range", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> > > (std::map<int,int>::*)(const int &)) &std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::equal_range, "C++: std::map<int, int, std::less<int>, std::allocator<std::pair<const int, int> > >::equal_range(const int &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<int, int>, class std::__tree_node<struct std::__value_type<int, int>, void *> *, long> > >", pybind11::arg("__k"));
	}
}
