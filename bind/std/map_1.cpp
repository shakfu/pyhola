#include <functional>
#include <iterator>
#include <libdialect/faces.h>
#include <libdialect/graphs.h>
#include <map>
#include <memory>
#include <sstream> // __str__
#include <utility>

#include <functional>
#include <pybind11/pybind11.h>
#include <string>

#ifndef BINDER_PYBIND11_TYPE_CASTER
	#define BINDER_PYBIND11_TYPE_CASTER
	PYBIND11_DECLARE_HOLDER_TYPE(T, std::shared_ptr<T>)
	PYBIND11_DECLARE_HOLDER_TYPE(T, T*)
	PYBIND11_MAKE_OPAQUE(std::shared_ptr<void>)
#endif

void bind_std_map_1(std::function< pybind11::module &(std::string const &namespace_) > &M)
{
	{ // std::map file:map line:898
		pybind11::class_<std::map<unsigned int,std::shared_ptr<dialect::Edge>>, std::shared_ptr<std::map<unsigned int,std::shared_ptr<dialect::Edge>>>> cl(M("std"), "map_unsigned_int_std_shared_ptr_dialect_Edge_t", "");
		cl.def( pybind11::init( [](){ return new std::map<unsigned int,std::shared_ptr<dialect::Edge>>(); } ) );
		cl.def( pybind11::init<const struct std::less<unsigned int> &>(), pybind11::arg("__comp") );

		cl.def( pybind11::init<const struct std::less<unsigned int> &, const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > &>(), pybind11::arg("__comp"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::map<unsigned int,std::shared_ptr<dialect::Edge>> const &o){ return new std::map<unsigned int,std::shared_ptr<dialect::Edge>>(o); } ) );
		cl.def( pybind11::init<const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > &>(), pybind11::arg("__a") );

		cl.def( pybind11::init<const class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &, const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > &>(), pybind11::arg("__m"), pybind11::arg("__a") );

		cl.def("assign", (class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > & (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::operator=, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::operator=(const class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &) --> class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &", pybind11::return_value_policy::automatic, pybind11::arg("__m"));
		cl.def("empty", (bool (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::empty, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::empty() const --> bool");
		cl.def("size", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::size, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::max_size, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::max_size() const --> unsigned long");
		cl.def("__getitem__", (class std::shared_ptr<class dialect::Edge> & (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::operator[], "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::operator[](const unsigned int &) --> class std::shared_ptr<class dialect::Edge> &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("at", (class std::shared_ptr<class dialect::Edge> & (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::at, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::at(const unsigned int &) --> class std::shared_ptr<class dialect::Edge> &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("get_allocator", (class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::get_allocator, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::get_allocator() const --> class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > >");
		cl.def("key_comp", (struct std::less<unsigned int> (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::key_comp, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::key_comp() const --> struct std::less<unsigned int>");
		cl.def("insert", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> >, bool> (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::insert, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::insert(const struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> >, bool>", pybind11::arg("__v"));
		cl.def("erase", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::erase, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::erase(const unsigned int &) --> unsigned long", pybind11::arg("__k"));
		cl.def("clear", (void (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)()) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::clear, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::clear() --> void");
		cl.def("swap", (void (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::swap, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::swap(class std::map<unsigned int, class std::shared_ptr<class dialect::Edge>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Edge> > > > &) --> void", pybind11::arg("__m"));
		cl.def("count", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const unsigned int &) const) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::count, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::count(const unsigned int &) const --> unsigned long", pybind11::arg("__k"));
		cl.def("equal_range", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> > > (std::map<unsigned int,std::shared_ptr<dialect::Edge>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::equal_range, "C++: std::map<unsigned int, std::shared_ptr<dialect::Edge>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Edge> > > >::equal_range(const unsigned int &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Edge> >, void *> *, long> > >", pybind11::arg("__k"));
	}
	{ // std::map file:map line:898
		pybind11::class_<std::map<unsigned int,std::shared_ptr<dialect::Nexus>>, std::shared_ptr<std::map<unsigned int,std::shared_ptr<dialect::Nexus>>>> cl(M("std"), "map_unsigned_int_std_shared_ptr_dialect_Nexus_t", "");
		cl.def( pybind11::init( [](){ return new std::map<unsigned int,std::shared_ptr<dialect::Nexus>>(); } ) );
		cl.def( pybind11::init<const struct std::less<unsigned int> &>(), pybind11::arg("__comp") );

		cl.def( pybind11::init<const struct std::less<unsigned int> &, const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > &>(), pybind11::arg("__comp"), pybind11::arg("__a") );

		cl.def( pybind11::init( [](std::map<unsigned int,std::shared_ptr<dialect::Nexus>> const &o){ return new std::map<unsigned int,std::shared_ptr<dialect::Nexus>>(o); } ) );
		cl.def( pybind11::init<const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > &>(), pybind11::arg("__a") );

		cl.def( pybind11::init<const class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &, const class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > &>(), pybind11::arg("__m"), pybind11::arg("__a") );

		cl.def("assign", (class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > & (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::operator=, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::operator=(const class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &) --> class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &", pybind11::return_value_policy::automatic, pybind11::arg("__m"));
		cl.def("empty", (bool (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::empty, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::empty() const --> bool");
		cl.def("size", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::size, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::size() const --> unsigned long");
		cl.def("max_size", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::max_size, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::max_size() const --> unsigned long");
		cl.def("__getitem__", (class std::shared_ptr<class dialect::Nexus> & (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::operator[], "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::operator[](const unsigned int &) --> class std::shared_ptr<class dialect::Nexus> &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("at", (class std::shared_ptr<class dialect::Nexus> & (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::at, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::at(const unsigned int &) --> class std::shared_ptr<class dialect::Nexus> &", pybind11::return_value_policy::automatic, pybind11::arg("__k"));
		cl.def("get_allocator", (class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::get_allocator, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::get_allocator() const --> class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > >");
		cl.def("key_comp", (struct std::less<unsigned int> (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)() const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::key_comp, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::key_comp() const --> struct std::less<unsigned int>");
		cl.def("insert", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> >, bool> (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::insert, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::insert(const struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> >, bool>", pybind11::arg("__v"));
		cl.def("erase", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::erase, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::erase(const unsigned int &) --> unsigned long", pybind11::arg("__k"));
		cl.def("clear", (void (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)()) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::clear, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::clear() --> void");
		cl.def("swap", (void (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::swap, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::swap(class std::map<unsigned int, class std::shared_ptr<class dialect::Nexus>, struct std::less<unsigned int>, class std::allocator<struct std::pair<const unsigned int, class std::shared_ptr<class dialect::Nexus> > > > &) --> void", pybind11::arg("__m"));
		cl.def("count", (unsigned long (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const unsigned int &) const) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::count, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::count(const unsigned int &) const --> unsigned long", pybind11::arg("__k"));
		cl.def("equal_range", (struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> > > (std::map<unsigned int,std::shared_ptr<dialect::Nexus>>::*)(const unsigned int &)) &std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::equal_range, "C++: std::map<unsigned int, std::shared_ptr<dialect::Nexus>, std::less<unsigned int>, std::allocator<std::pair<const unsigned int, std::shared_ptr<dialect::Nexus> > > >::equal_range(const unsigned int &) --> struct std::pair<class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> >, class std::__map_iterator<class std::__tree_iterator<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, class std::__tree_node<struct std::__value_type<unsigned int, class std::shared_ptr<class dialect::Nexus> >, void *> *, long> > >", pybind11::arg("__k"));
	}
}
